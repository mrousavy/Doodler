// <auto-generated />
using DoodlerCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DoodlerCore.Migrations
{
    [DbContext(typeof(DoodlerContext))]
    partial class DoodlerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DoodlerCore.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("DoodlerCore.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("EndsAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Poll");
                });

            modelBuilder.Entity("DoodlerCore.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DoodlerCore.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnswerId");

                    b.Property<int?>("PollId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DoodlerCore.DateAnswer", b =>
                {
                    b.HasBaseType("DoodlerCore.Answer");

                    b.Property<DateTime>("Date");

                    b.ToTable("DateAnswer");

                    b.HasDiscriminator().HasValue("DateAnswer");
                });

            modelBuilder.Entity("DoodlerCore.TextAnswer", b =>
                {
                    b.HasBaseType("DoodlerCore.Answer");

                    b.Property<string>("Text");

                    b.ToTable("TextAnswer");

                    b.HasDiscriminator().HasValue("TextAnswer");
                });

            modelBuilder.Entity("DoodlerCore.DatePoll", b =>
                {
                    b.HasBaseType("DoodlerCore.Poll");


                    b.ToTable("DatePoll");

                    b.HasDiscriminator().HasValue("DatePoll");
                });

            modelBuilder.Entity("DoodlerCore.TextPoll", b =>
                {
                    b.HasBaseType("DoodlerCore.Poll");


                    b.ToTable("TextPoll");

                    b.HasDiscriminator().HasValue("TextPoll");
                });

            modelBuilder.Entity("DoodlerCore.Answer", b =>
                {
                    b.HasOne("DoodlerCore.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId");
                });

            modelBuilder.Entity("DoodlerCore.Poll", b =>
                {
                    b.HasOne("DoodlerCore.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("DoodlerCore.Vote", b =>
                {
                    b.HasOne("DoodlerCore.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("DoodlerCore.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId");

                    b.HasOne("DoodlerCore.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
